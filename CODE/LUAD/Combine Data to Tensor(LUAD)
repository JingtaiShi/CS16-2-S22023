{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1iLithYkwNKm7VfW2A-OCw8I9JG2Cg1So","timestamp":1697070632575}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["!pip install tensorly\n","!pip install lifelines"],"metadata":{"id":"f2_QWblebEVV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"K8OATcTdZUiV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","\n","# Load your data\n","methylation_data = pd.read_csv('/content/drive/MyDrive/COMP5703/table data/TCGA-LUAD/methylation_filtered.csv').to_numpy()\n","rnaseq_data = pd.read_csv('/content/drive/MyDrive/COMP5703/table data/TCGA-LUAD/rnaseq_filtered.csv').to_numpy()\n","mirna_data = pd.read_csv('/content/drive/MyDrive/COMP5703/table data/TCGA-LUAD/mirna_filtered.csv').to_numpy()\n","# image_data = pd.read_csv('/content/drive/MyDrive/all_images_128.csv').to_numpy()\n","\n","\n","# Remove the first row and first column from each data matrix\n","methylation_data = methylation_data[0:, 1:]\n","rnaseq_data = rnaseq_data[0:, 1:]\n","mirna_data = mirna_data[0:, 1:]\n","# image_data = image_data[1:, 1:]\n","\n","# print(methylation_data)\n","# Combine the tensor\n","multi_omics_tensor = np.array([methylation_data, rnaseq_data, mirna_data], dtype=object)\n","\n","print(multi_omics_tensor.shape)\n","\n","# 将多维张量重新排列轴的顺序\n","multi_omics_tensor_transposed = np.transpose(multi_omics_tensor, (1, 0, 2))\n","multi_omics_tensor_transposed = multi_omics_tensor_transposed.astype(np.float64)\n","\n","\n","print(multi_omics_tensor_transposed)\n","print(multi_omics_tensor_transposed.shape)\n"],"metadata":{"id":"OZ823U0vZWFm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697074541709,"user_tz":-660,"elapsed":2,"user":{"displayName":"Jingtai Shi","userId":"07972425847164608786"}},"outputId":"d11388aa-f8e5-42c6-e8ac-7c5e8c9b01b7"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(3, 447, 128)\n","[[[ 7.264213    0.6593939   7.6063876  ...  0.          0.\n","    7.6023116 ]\n","  [ 6.676298    0.          0.         ...  0.          0.\n","   10.848832  ]\n","  [ 0.          0.          0.         ...  0.          0.\n","    0.        ]]\n","\n"," [[ 2.1197848   2.3783484   6.338281   ...  0.          0.\n","   14.195143  ]\n","  [ 2.6886463   0.          0.         ...  0.          0.\n","    6.731568  ]\n","  [ 0.          0.1008073   0.         ...  0.          0.\n","    0.        ]]\n","\n"," [[ 9.13544    14.100223    3.0878131  ...  0.          0.\n","   16.887213  ]\n","  [13.620765    0.          0.         ...  0.          0.\n","   12.31671   ]\n","  [ 0.          0.          0.         ...  0.          0.\n","    0.        ]]\n","\n"," ...\n","\n"," [[13.342142    7.5853267   0.         ...  0.          0.\n","   13.768204  ]\n","  [ 2.839732    0.          0.         ...  0.          0.\n","    4.5076046 ]\n","  [ 0.          0.39429945  0.         ...  0.          0.\n","    0.        ]]\n","\n"," [[ 3.1367686   0.          9.488114   ...  0.          0.\n","    6.2427845 ]\n","  [ 1.1204555   0.          0.         ...  0.          0.\n","    6.238852  ]\n","  [ 0.          0.          0.         ...  0.          0.\n","    0.        ]]\n","\n"," [[ 3.9209936   0.          3.672334   ...  0.          2.036619\n","    0.        ]\n","  [ 0.          0.          0.         ...  0.          0.\n","    5.8515515 ]\n","  [ 0.          0.          0.         ...  0.          0.\n","    0.        ]]]\n","(447, 3, 128)\n"]}]},{"cell_type":"code","source":["import numpy as np\n","from tensorly.decomposition import parafac\n","from tensorly.decomposition import non_negative_parafac\n","\n","# CP decomposition\n","rank = 3  # the rank of CP decomposition, which can be motified\n","factors = parafac(multi_omics_tensor_transposed, rank=rank)\n","\n","print(factors)\n","\n","# obtain weights and factors\n","weights = factors[0]\n","factor_matrices = factors[1]  # This is a list that contains 3 factors array\n","\n","# patient’s mode\n","patient_mode_matrix = factor_matrices[0]\n","# omics feature mode\n","omics_feature_mode_matrix = factor_matrices[1]\n","# genes mode\n","genes_mode_matrix = factor_matrices[2]"],"metadata":{"id":"b9STRBwuobWn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697074571687,"user_tz":-660,"elapsed":844,"user":{"displayName":"Jingtai Shi","userId":"07972425847164608786"}},"outputId":"387672ab-9b19-446f-e5c1-6de972c46844"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["(weights, factors) : rank-3 CPTensor of shape (447, 3, 128)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.model_selection import train_test_split\n","from lifelines import KaplanMeierFitter\n","from lifelines.statistics import logrank_test\n","import numpy as np\n","\n","# 1. 读取clinical.xlsx文件\n","data_methylation = pd.read_csv('/content/drive/MyDrive/COMP5703/table data/TCGA-LUAD/methylation_filtered.csv')\n","data_clinical = pd.read_excel('/content/drive/MyDrive/COMP5703/table data/TCGA-LUAD/Clinical.xlsx')\n","selected_samples = data_methylation.iloc[:, 0].unique()\n","data = data_clinical[data_clinical['attrib_name'].isin(selected_samples)]\n","data.fillna(0, inplace=True)\n","\n","\n","# 3. 分割数据集\n","X_train, X_test, y_train, y_test = train_test_split(patient_mode_matrix, data[['overall_survival', 'status']], test_size=0.2, random_state=42)\n","\n","# 4. 使用Kaplan-Meier对训练数据进行生存分析，并分为三个风险组\n","kmf = KaplanMeierFitter()\n","risk_scores = pd.Series(X_train.sum(axis=1), index=y_train.index)\n","risk_quantiles = pd.qcut(risk_scores, 3, labels=[\"low\", \"medium\", \"high\"])\n","\n","# 使用Kaplan-Meier曲线画出每个风险组的生存曲线\n","for label in [\"low\", \"medium\", \"high\"]:\n","    mask = risk_quantiles == label\n","    kmf.fit(y_train['overall_survival'][mask], event_observed=y_train['status'][mask], label=label)\n","    kmf.plot()\n","\n","# 5. 使用logrank_test比较不同风险组\n","results = logrank_test(y_train['overall_survival'][risk_quantiles == \"low\"], y_train['overall_survival'][risk_quantiles == \"medium\"], event_observed_A=y_train['status'][risk_quantiles == \"low\"], event_observed_B=y_train['status'][risk_quantiles == \"medium\"])\n","print(results.print_summary())\n","\n","results = logrank_test(y_train['overall_survival'][risk_quantiles == \"medium\"], y_train['overall_survival'][risk_quantiles == \"high\"], event_observed_A=y_train['status'][risk_quantiles == \"medium\"], event_observed_B=y_train['status'][risk_quantiles == \"high\"])\n","print(results.print_summary())\n"],"metadata":{"id":"6wap4yBMojqb"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 分为两个风险组\n","risk_scores_binary = pd.cut(risk_scores, bins=[-np.inf, risk_scores.median(), np.inf], labels=[\"low\", \"high\"])\n","\n","# 使用Kaplan-Meier曲线画出每个风险组的生存曲线\n","for label in [\"low\", \"high\"]:\n","    mask = risk_scores_binary == label\n","    kmf.fit(y_train['overall_survival'][mask], event_observed=y_train['status'][mask], label=label)\n","    kmf.plot()\n","\n","# 使用logrank_test比较两个风险组\n","results_binary = logrank_test(y_train['overall_survival'][risk_scores_binary == \"low\"], y_train['overall_survival'][risk_scores_binary == \"high\"], event_observed_A=y_train['status'][risk_scores_binary == \"low\"], event_observed_B=y_train['status'][risk_scores_binary == \"high\"])\n","print(results_binary.print_summary())"],"metadata":{"id":"MnU0f756oknT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","# 三个风险组的箱型图\n","plt.figure(figsize=(10, 6))\n","sns.boxplot(x=risk_quantiles, y=y_train['overall_survival'])\n","plt.title('Survival Time across Three Risk Groups')\n","plt.xlabel('Risk Group')\n","plt.ylabel('Survival Time')\n","plt.show()\n","\n","# 两个风险组的箱型图\n","plt.figure(figsize=(10, 6))\n","sns.boxplot(x=risk_scores_binary, y=y_train['overall_survival'])\n","plt.title('Survival Time across Two Risk Groups')\n","plt.xlabel('Risk Group')\n","plt.ylabel('Survival Time')\n","plt.show()"],"metadata":{"id":"9cDXC3IKomyV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from scipy.cluster.hierarchy import linkage, fcluster\n","# 3. 使用Hierarchical clustering对数据进行分组\n","linked = linkage(patient_mode_matrix, 'ward')\n","\n","# 两个风险组\n","label_2_clusters = fcluster(linked, 2, criterion='maxclust')\n","\n","# 三个风险组\n","label_3_clusters = fcluster(linked, 3, criterion='maxclust')\n","\n","# 4. 使用Kaplan-Meier进行生存分析\n","kmf = KaplanMeierFitter()\n","\n","# 4.1. 对两个风险组\n","plt.figure(figsize=(12, 6))\n","plt.subplot(1, 2, 1)\n","for label in np.unique(label_2_clusters):\n","    mask = label_2_clusters == label\n","    if label == 1:\n","        risk_group = 'High risk'\n","    else:\n","        risk_group = 'Low risk'\n","    kmf.fit(data['overall_survival'][mask], event_observed=1 - data['status'][mask], label=risk_group)\n","    kmf.plot(ax=plt.gca())\n","plt.title('Kaplan-Meier Curve for Two Risk Groups')\n","\n","# 4.2. 对三个风险组\n","plt.subplot(1, 2, 2)\n","for label in np.unique(label_3_clusters):\n","    mask = label_3_clusters == label\n","    if label == 1:\n","        risk_group = 'High risk'\n","    elif label == 2:\n","        risk_group = 'Medium risk'\n","    else:\n","        risk_group = 'Low risk'\n","    kmf.fit(data['overall_survival'][mask], event_observed=1 - data['status'][mask], label=risk_group)\n","    kmf.plot(ax=plt.gca())\n","plt.title('Kaplan-Meier Curve for Three Risk Groups')\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"id":"2yrIUp9SooV4"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Try to calculate the P-value for both of the two model.\n","from lifelines.statistics import logrank_test\n","\n","# 对两个风险组\n","results_2 = logrank_test(data['overall_survival'][label_2_clusters == 1],\n","                         data['overall_survival'][label_2_clusters == 2],\n","                         event_observed_A=1 - data['status'][label_2_clusters == 1],\n","                         event_observed_B=1 - data['status'][label_2_clusters == 2])\n","p_value_2_groups = results_2.p_value\n","print(f\"P-value for difference between the High risk and Low risk groups: {p_value_2_groups:.4f}\")\n","\n","# 对三个风险组，这里我们需要做多重比较\n","results_3_1_vs_2 = logrank_test(data['overall_survival'][label_3_clusters == 1],\n","                                data['overall_survival'][label_3_clusters == 2],\n","                                event_observed_A=1 - data['status'][label_3_clusters == 1],\n","                                event_observed_B=1 - data['status'][label_3_clusters == 2])\n","\n","results_3_1_vs_3 = logrank_test(data['overall_survival'][label_3_clusters == 1],\n","                                data['overall_survival'][label_3_clusters == 3],\n","                                event_observed_A=1 - data['status'][label_3_clusters == 1],\n","                                event_observed_B=1 - data['status'][label_3_clusters == 3])\n","\n","results_3_2_vs_3 = logrank_test(data['overall_survival'][label_3_clusters == 2],\n","                                data['overall_survival'][label_3_clusters == 3],\n","                                event_observed_A=1 - data['status'][label_3_clusters == 2],\n","                                event_observed_B=1 - data['status'][label_3_clusters == 3])\n","print(\"_\"*75)\n","print(\"P-value for difference between the High risk, Middle risk and Low risk groups:\")\n","print(f\"P-value for difference between group 1 and 2 (three risk groups): {results_3_1_vs_2.p_value:.4f}\")\n","print(f\"P-value for difference between group 1 and 3 (three risk groups): {results_3_1_vs_3.p_value:.4f}\")\n","print(f\"P-value for difference between group 2 and 3 (three risk groups): {results_3_2_vs_3.p_value:.4f}\")"],"metadata":{"id":"hedmaMXfoqbv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# 4.1 两个风险组\n","plt.figure(figsize=(12, 6))\n","plt.subplot(1, 2, 1)\n","for label in np.unique(label_2_clusters):\n","    mask = label_2_clusters == label\n","    survival_times = data['overall_survival'][mask]\n","    risk_group = 'High risk' if label == 1 else 'Low risk'\n","    plt.barh(risk_group, survival_times.mean(), color='skyblue')\n","    plt.xlabel('Average Survival Time')\n","    plt.title('Average Survival Time for Two Risk Groups')\n","\n","# 4.2 三个风险组\n","plt.subplot(1, 2, 2)\n","for label in np.unique(label_3_clusters):\n","    mask = label_3_clusters == label\n","    survival_times = data['overall_survival'][mask]\n","    risk_group = 'High risk' if label == 1 else ('Medium risk' if label == 2 else 'Low risk')\n","    plt.barh(risk_group, survival_times.mean(), color='salmon')\n","    plt.xlabel('Average Survival Time')\n","    plt.title('Average Survival Time for Three Risk Groups')\n","\n","plt.tight_layout()\n","plt.show()"],"metadata":{"id":"nA57_fpuosLX"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def plot_number_at_risk(labels, survival_times, title):\n","    \"\"\" 绘制每个时间点在每个风险组的存活人数 \"\"\"\n","    unique_times = np.unique(survival_times)\n","    risks = np.unique(labels)\n","    plt.figure(figsize=(10, 5))\n","\n","    for risk in risks:\n","        counts = []\n","        for time in unique_times:\n","            mask = (labels == risk) & (survival_times >= time)\n","            counts.append(sum(mask))\n","        plt.plot(unique_times, counts, label=f\"Risk group {risk}\")\n","\n","    plt.xlabel(\"Survival Time\")\n","    plt.ylabel(\"Number at Risk\")\n","    plt.title(title)\n","    plt.legend()\n","    plt.grid(True)\n","    plt.show()\n","\n","# 两个风险组的图\n","plot_number_at_risk(label_2_clusters, data['overall_survival'], \"Number at Risk for Two Risk Groups\")\n","\n","# 三个风险组的图\n","plot_number_at_risk(label_3_clusters, data['overall_survival'], \"Number at Risk for Three Risk Groups\")"],"metadata":{"id":"SfY91jgHovjc"},"execution_count":null,"outputs":[]}]}